
$scope.location;

var distance = 5;
var logEvents = false;

  $scope.search = function() {
    navigator.geolocation.getCurrentPosition(function (position) {
      $scope.position = position;
      $scope.location = "(Using Your GPS Location)";
      
      $ionicLoading.show();

      var maxEvents = 50;
      var endTime = new Date();
      endTime.setDate(endTime.getDate() + 3); // Search 3 days out

      // fb events
      var fbPromise = new Promise(function (resolve, reject) {
        $scope.eventSearch.search({
          "lat": position.coords.latitude,
          "lng": position.coords.longitude,
          "distance": $scope.distance * 1609.34,
          "until": endTime.toISOStringCustom()
        }).then(function (events) {
          if (logEvents) console.log(events.events);
          var tmpEvents = [];
          for (var i = 0; i < events.events.length; i++) {
            tmpEvents.push(Event.convertFBEvent(events.events[i]));
          }
          // return resolve([]);
          return resolve(tmpEvents);
        }).catch(function (error) {
          return reject(error);
        });
      });

      // meetup events
      var meetupPromise = new Promise(function (resolve, reject) {
        var url = "https://api.meetup.com/find/upcoming_events?sign=true&photo-host=public&fields=featured_photo,group_category&lat="
          + position.coords.latitude + "&lon=" + position.coords.longitude + "&page=" + maxEvents + "&end_date_range="
          + endTime.toISOStringCustom() + "&callback=JSON_CALLBACK&radius=" + $scope.distance + "&key=" + keys.meetupSecret;

        $http.jsonp(url)
        .success(function (response) {
          if (response.data.errors) return reject(response.data.errors);

          if (logEvents) console.log(response.data.events);
          var tmpEvents = [];
          for (var i = 0; i < response.data.events.length; i++) {
            tmpEvents.push(Event.convertMeetupEvent(response.data.events[i], position));
          }
          // return resolve([]);
          return resolve(tmpEvents);
        }).catch(function (error) {
          return reject(error);
        });
      });
      
      // eventbrite events
      var eventbritePromise = new Promise(function (resolve, reject) {
        var url = "https://www.eventbriteapi.com/v3/events/search/?expand=venue,category,subcategory&location.latitude=" + position.coords.latitude
          + "&location.longitude=" + position.coords.longitude + "&location.within=" + $scope.distance + "mi&start_date.range_end="
          + endTime.toISOStringCustom() + "&token=" + keys.eventbriteSecret;

        $http.get(url)
        .success(function (response) {
          if (logEvents) console.log(response.events);
          var tmpEvents = [];
          for (var i = 0; i < response.events.length; i++) {
            tmpEvents.push(Event.convertEventbriteEvent(response.events[i], position));
          }
          // return resolve([]);
          return resolve(tmpEvents);
        }).catch(function (error) {
          return reject(error);
        });
      });

      // Comment these out to disable fetching events from different services
      var promises = [
        fbPromise,
        meetupPromise,
        eventbritePromise
      ];

      // Run all promises, do not fail on promises that are rejected
      Promise.settleAll(promises)
      .then(function (allData) {
        $scope.events = [];
        $scope.categories = [];

        // Can't seem to loop over set in this version of angular
        tmpCategories = new Set();
        
        for (var i = 0; i < allData.length; i++) {
          var data = allData[i];
          for (var j = 0; j < data.length; j++) {
            // Cut things that are longer than 3 days
            if (new Date(data[j].endTime) - new Date(data[j].startTime) < (1000 * 60 * 60 * 24 * 3)) {
              $scope.events.push(data[j]);
              if (data[j].category) {
                tmpCategories.add(data[j].category);
              }
            }
          }
        }

        $scope.events.sort(function(a, b) {
          return new Date(a.startTime) - new Date(b.startTime);
        });

        for (let category of tmpCategories) {
          $scope.categories.push(category);
        }
        $scope.categories.push("All");
        $scope.selectedCategory = "All";

        $scope.$apply();
        $ionicLoading.hide();
      }).catch(function (error) {
        console.error(JSON.stringify(error));
      });

    }, function (error) {
      console.error(error);
      if (error.code === 1) {
        $ionicPopup.alert({
          title: 'Denied Location Access',
          template: 'It looks like you denied location access, you need to enable it for this page to use our service.'
        });
      }
    });
  }